
#ifdef ESP8266
#include <ESP8266WiFi.h>
#else
#ifdef ESP32
#include <WiFi.h>
#include <WiFiClientSecure.h>
#endif // ESP32
#endif // ESP8266
#include <HTTPClient.h>
#include <Arduino_MQTT_Client.h>
#include <ThingsBoard.h>

#ifdef ESP8266
#include <Arduino_ESP8266_Updater.h>
#else
#ifdef ESP32
#include <Espressif_Updater.h>
#endif // ESP32
#endif // ESP8266
#include <ArduinoJson.h>
#define ENCRYPTED false

#if THINGSBOARD_ENABLE_PROGMEM
constexpr char CURRENT_FIRMWARE_TITLE[] PROGMEM = "test_ota";
constexpr char CURRENT_FIRMWARE_VERSION[] PROGMEM = "1.0.0";
#else
constexpr char CURRENT_FIRMWARE_TITLE[] = "test_ota";
constexpr char CURRENT_FIRMWARE_VERSION[] = "1.0.0";
#endif

#if THINGSBOARD_ENABLE_PROGMEM
constexpr uint8_t FIRMWARE_FAILURE_RETRIES PROGMEM = 12U;
#else
constexpr uint8_t FIRMWARE_FAILURE_RETRIES = 12U;
#endif

#if THINGSBOARD_ENABLE_PROGMEM
constexpr uint16_t FIRMWARE_PACKET_SIZE PROGMEM = 4096U;
#else
constexpr uint16_t FIRMWARE_PACKET_SIZE = 4096U;
#endif

#if THINGSBOARD_ENABLE_PROGMEM
constexpr char WIFI_SSID[] PROGMEM = "LIFETRUSTOFFICE";
constexpr char WIFI_PASSWORD[] PROGMEM = "Lifetrust@123";
#else
constexpr char WIFI_SSID[] = "LIFETRUSTOFFICE";
constexpr char WIFI_PASSWORD[] = "Lifetrust_Office";
#endif

#if THINGSBOARD_ENABLE_PROGMEM
constexpr char TOKEN[] PROGMEM = "rXShyBt7HJircy74f0bj";
#else
constexpr char TOKEN[] = "rXShyBt7HJircy74f0bj";
#endif

#if THINGSBOARD_ENABLE_PROGMEM
constexpr char THINGSBOARD_SERVER[] PROGMEM = "devices.dev.antzsystems.com";
#else
constexpr char THINGSBOARD_SERVER[] = "devices.dev.antzsystems.com";
#endif

#if ENCRYPTED
#if THINGSBOARD_ENABLE_PROGMEM
constexpr uint16_t THINGSBOARD_PORT PROGMEM = 8883U;
#else
constexpr uint16_t THINGSBOARD_PORT = 8883U;
#endif
#else
#if THINGSBOARD_ENABLE_PROGMEM
constexpr uint16_t THINGSBOARD_PORT PROGMEM = 1883U;
#else
constexpr uint16_t THINGSBOARD_PORT = 1883U;
#endif
#endif

#if THINGSBOARD_ENABLE_PROGMEM
constexpr uint16_t MAX_MESSAGE_SIZE PROGMEM = 512U;
#else
constexpr uint16_t MAX_MESSAGE_SIZE = 512U;
#endif

#if THINGSBOARD_ENABLE_PROGMEM
constexpr uint32_t SERIAL_DEBUG_BAUD PROGMEM = 115200U;
#else
constexpr uint32_t SERIAL_DEBUG_BAUD = 115200U;
#endif

#if THINGSBOARD_ENABLE_PROGMEM
constexpr char FW_STATE_UPDATED[] PROGMEM = "UPDATED";
#else
constexpr char FW_STATE_UPDATED[] = "UPDATED";
#endif // THINGSBOARD_ENABLE_PROGMEM

#if ENCRYPTED
WiFiClientSecure espClient;
#else
WiFiClient espClient;
#endif

Arduino_MQTT_Client mqttClient(espClient);
ThingsBoard tb(mqttClient, MAX_MESSAGE_SIZE);
String fw_version = "";
#ifdef ESP8266
Arduino_ESP8266_Updater updater;
#else
#ifdef ESP32
Espressif_Updater updater;
#endif // ESP32
#endif // ESP8266

bool currentFWSent = false;
bool updateRequestSent = false;

// Variable to store the firmware version received from the ThingsBoard server
String receivedFirmwareVersion = "";

// URL to request data
const char* serverUrl = "http://devices.dev.antzsystems.com:8080/api/v1/rXShyBt7HJircy74f0bj/attributes?fw_version";

// Variables to store the parsed data
String fw_checksum = "";
String fw_tag = "";

void InitWiFi() {
#if THINGSBOARD_ENABLE_PROGMEM
  Serial.println(F("Connecting to AP ..."));
#else
  Serial.println("Connecting to AP ...");
#endif
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
#if THINGSBOARD_ENABLE_PROGMEM
    Serial.print(F("."));
#else
    Serial.print(".");
#endif
  }
#if THINGSBOARD_ENABLE_PROGMEM
  Serial.println(F("Connected to AP"));
#else
  Serial.println("Connected to AP");
#endif
#if ENCRYPTED
  espClient.setCACert(ROOT_CERT);
#endif
}

bool reconnect() {
  const wl_status_t status = WiFi.status();
  if (status == WL_CONNECTED) {
    return true;
  }
  InitWiFi();
  return true;
}

void updatedCallback(const bool& success) {
  if (success) {
#if THINGSBOARD_ENABLE_PROGMEM
    Serial.println(F("Done, Reboot now"));
#else
    Serial.println("Done, Reboot now");
#endif

#ifdef ESP8266
    ESP.restart();
#else
#ifdef ESP32
    esp_restart();
#endif // ESP32
#endif // ESP8266
    return;
  }
#if THINGSBOARD_ENABLE_PROGMEM
  Serial.println(F("Downloading firmware failed"));
#else
  Serial.println("Downloading firmware failed");
#endif
}

void progressCallback(const size_t& currentChunk, const size_t& totalChunks) {
  Serial.printf("Progress %.2f%%\n", static_cast<float>(currentChunk * 100U) / totalChunks);
}

void setup() {
  Serial.begin(SERIAL_DEBUG_BAUD);
  delay(1000);
  InitWiFi();
}

// Simulated function to get the firmware version from ThingsBoard attributes
// You will need to set the firmware version as a shared attribute in ThingsBoard
void GetFirmwareVersionFromServer() {
  // Simulate receiving the firmware version as a shared attribute
  // Replace with actual telemetry/attribute handling code

  
  // Send the HTTP request
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(serverUrl);  // Specify the URL
    int httpCode = http.GET(); // Send the request

    if (httpCode > 0) {  // Check the returning code
      String payload = http.getString(); // Get the response payload
//      Serial.println("Response: ");
//      Serial.println(payload);

      // Allocate memory for the JSON document
      const size_t capacity = JSON_OBJECT_SIZE(2) + JSON_OBJECT_SIZE(1) + 60;
      DynamicJsonDocument doc(1000);

      // Parse JSON
      DeserializationError error = deserializeJson(doc, payload);
      
      if (error) {
        Serial.print("deserializeJson() failed: ");
        Serial.println(error.f_str());
        return;
      }

      // Extract values
      fw_checksum = doc["shared"]["fw_checksum"].as<String>();
      fw_tag = doc["shared"]["fw_tag"].as<String>();

      // Print values to the Serial Monitor
      Serial.print("Firmware Checksum: ");
      Serial.println(fw_checksum);
      Serial.print("Firmware Tag: ");
      Serial.println(fw_tag);
            // Extract the fw_version directly from the JSON structure
      fw_version = doc["shared"]["fw_version"].as<String>();
    } else {
      Serial.println("Error on HTTP request");
    }

    http.end();  // Free the resources
  }




  
  receivedFirmwareVersion = fw_version;  // Simulated value; replace this with real retrieval from the server
}

void loop() {
  delay(1000);
 // Serial.println("This is 2nd Loop");
  if (!reconnect()) {
    return;
  }

  if (!tb.connected()) {
    Serial.printf("Connecting to: (%s) with token (%s)\n", THINGSBOARD_SERVER, TOKEN);
    if (!tb.connect(THINGSBOARD_SERVER, TOKEN, THINGSBOARD_PORT)) {
#if THINGSBOARD_ENABLE_PROGMEM
      Serial.println(F("Failed to connect"));
#else
      Serial.println("Failed to connect");
#endif
      return;
    }
  }

  if (!currentFWSent) {
    currentFWSent = tb.Firmware_Send_Info(CURRENT_FIRMWARE_TITLE, CURRENT_FIRMWARE_VERSION) && tb.Firmware_Send_State(FW_STATE_UPDATED);
  }

  // Get the firmware version from the server (replace this with real attribute fetching)
  GetFirmwareVersionFromServer();
    
  if (CURRENT_FIRMWARE_VERSION ==  fw_version) {
    Serial.println("Firmware is already up to date." + fw_version);
  
    return;
  }

  if (!updateRequestSent) {
#if THINGSBOARD_ENABLE_PROGMEM
    Serial.println(F("Firmware Update..."));
#else
    Serial.println("Firmware Update...");
#endif
    const OTA_Update_Callback callback(&progressCallback, &updatedCallback, CURRENT_FIRMWARE_TITLE, CURRENT_FIRMWARE_VERSION, &updater, FIRMWARE_FAILURE_RETRIES, FIRMWARE_PACKET_SIZE);
    updateRequestSent = tb.Start_Firmware_Update(callback);
  }

  tb.loop();
}




